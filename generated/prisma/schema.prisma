// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modèle pour les transactions inter-universitaires

// Modèle pour les conventions entre universités
model ConventionInteruniversitaire {
  id                String         @id @default(uuid())
  universiteId1     String         @map("universite_id_1")
  universiteId2     String         @map("universite_id_2")
  dateDebut         DateTime       @default(now()) @map("date_debut")
  dateFin           DateTime?      @map("date_fin")
  estActive         Boolean        @default(true) @map("est_active")
  typeConvention    TypeConvention @default(EMPRUNT_RECIPROQUE)
  detailsConvention String?        @map("details_convention") @db.Text

  @@unique([universiteId1, universiteId2])
}

enum TypeModalite {
  INTERNE
  EXTERNE
}

// Modèle pour les règles de prêt selon le profil utilisateur
model ReglePret {
  id                  String   @id @default(uuid())
  universiteId        String   @map("universite_id")
  roleUtilisateur     RoleUser @map("role_utilisateur") // ETUDIANT, ENSEIGNANT, etc.
  nombreMaxOuvrages   Int      @default(2) @map("nombre_max_ouvrages")
  dureeEmpruntJours   Int      @default(15) @map("duree_emprunt_jours")
  nbRenouvellements   Int      @default(1) @map("nb_renouvellements")
  penaliteRetardJours Boolean  @default(true) @map("penalite_retard_jours")
  estActif            Boolean  @default(true) @map("est_actif")

  // Relation avec l'université
  universite Universite @relation(fields: [universiteId], references: [id])

  @@unique([universiteId, roleUtilisateur])
  @@index([universiteId])
  @@index([roleUtilisateur])
}

// Modèle pour les politiques générales de la bibliothèque
model PolitiqueBibliotheque {
  id              String   @id @default(uuid())
  universiteId    String   @map("universite_id")
  politiqueRetour String   @map("politique_retour") @db.Text // Description des lieux de retour
  politiquePerte  String   @map("politique_perte") @db.Text // Politique en cas de perte
  penaliteRetard  String   @map("penalite_retard") @db.Text // Description de la pénalité
  estActive       Boolean  @default(true) @map("est_active")
  dateMiseAJour   DateTime @updatedAt @map("date_mise_a_jour")

  // Relation avec l'université
  universite Universite @relation(fields: [universiteId], references: [id])

  @@index([universiteId])
}

model SanctionUtilisateur {
  id              String       @id @default(uuid())
  userId          String       @map("user_id")
  typeRestriction TypeSanction @map("type_restriction")
  dateDebut       DateTime     @default(now()) @map("date_debut")
  dateFin         DateTime     @map("date_fin") // Calculée automatiquement selon la règle
  motif           String       @db.Text
  empruntId       String?      @map("emprunt_id") // Lien vers l'emprunt en retard ou perdu
  estActive       Boolean      @default(true) @map("est_active")

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  emprunt Emprunt? @relation(fields: [empruntId], references: [id])

  @@index([userId, estActive])
  @@index([dateFin])
}

enum TypeSanction {
  INTERDICTION_EMPRUNT
  LIMITATION_SERVICES
  SUSPENSION_COMPTE
  AMENDE_FINANCIERE
}

enum TypeConvention {
  EMPRUNT_RECIPROQUE
  CONSULTATION_UNIQUEMENT
  ACCES_COMPLET
  COLLABORATION_SPECIFIQUE
}

enum TypeValidation {
  EN_ATTENTE
  VALIDE
  REJETEE
  ANNULEE
}

// Système de réservation des ressources
model Reservation {
  id                   String            @id @default(uuid())
  userId               String?           @map("user_id")
  ressourceId          String            @map("ressource_id")
  dateReservation      DateTime          @default(now()) @map("date_reservation")
  dateDebut            DateTime          @map("date_debut")
  dateFin              DateTime          @map("date_fin")
  statut               StatutReservation @default(EN_ATTENTE)
  commentaire          String?           @db.Text
  universiteEmprunteur String            @map("universite_emprunteur") // Université d'origine du réservateur
  validePar            String?           @map("valide_par") // ID de l'administrateur qui a validé la réservation externe
  user                 User?             @relation(fields: [userId], references: [id])
  ressource            Ressource         @relation(fields: [ressourceId], references: [id])
  valideur             Bibliothecaire?   @relation(fields: [validePar], references: [id]) // ID de l'administrateur qui a validé la réservation

  @@index([dateDebut, dateFin]) // Index pour optimiser les recherches par date
}

enum StatutReservation {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
  TERMINEE
  RETARD
}

// Gestion des exemplaires physiques
model ExemplairePhysique {
  id              String         @id @default(uuid())
  ressourceId     String         @map("ressource_id")
  cote            String // Référence bibliothécaire
  etat            EtatExemplaire @default(BON)
  disponible      Boolean        @default(true)
  localisation    String // Salle, étage, étagère
  dateAcquisition DateTime?      @default(now()) @map("date_acquisition")
  qrCode          String?        @map("qr_code") // QR code pour identification

  // Champs pour emprunts inter-universitaires
  dureeMaxEmpruntExterne  Int @default(14) @map("duree_max_emprunt_externe") // Durée en jours
  nbMaxExemplairesExterne Int @default(1) @map("nb_max_exemplaires_externe") // Nombre max d'exemplaires pour emprunt externe

  ressource Ressource @relation(fields: [ressourceId], references: [id])
  emprunts  Emprunt[]

  @@index([ressourceId])
  @@index([disponible])
  @@index([etat])
  @@index([qrCode])
}

enum EtatExemplaire {
  NEUF
  BON
  USAGE
  ABIME
  PERDU
}

// Gestion des emprunts physiques
model Emprunt {
  id                   String                @id @default(uuid())
  exemplaireId         String                @map("exemplaire_id")
  userId               String                @map("user_id")
  dateEmprunt          DateTime              @default(now()) @map("date_emprunt")
  dateRetourPrevue     DateTime              @map("date_retour_prevue")
  dateRetourEffective  DateTime?             @map("date_retour_effective")
  statut               StatutEmprunt         @default(EN_COURS)
  commentaire          String?               @db.Text
  universiteEmprunteur String                @map("universite_emprunteur") // Université d'origine de l'emprunteur
  motifEmprunt         String?               @map("motif_emprunt") // Justification pour emprunt externe
  validePar            String?               @map("valide_par") // ID de l'administrateur qui a validé l'emprunt externe
  exemplaire           ExemplairePhysique    @relation(fields: [exemplaireId], references: [id])
  user                 User?                 @relation(fields: [userId], references: [id])
  SanctionUtilisateur  SanctionUtilisateur[]

  @@index([dateEmprunt, dateRetourPrevue])
  @@index([statut])
}

enum StatutEmprunt {
  EN_COURS
  RETOURNE
  RETARD
  PERDU
}

// Système de recommandation amélioré
model Recommandation {
  id                    String              @id @default(uuid())
  userId                String              @map("user_id")
  ressourceId           String              @map("ressource_id")
  dateRecommandation    DateTime            @default(now()) @map("date_recommandation")
  score                 Float // Score de pertinence calculé
  motif                 MotifRecommandation @map("motif_recommandation") // Motif de la recommandation
  estVue                Boolean             @default(false) @map("est_vue")
  estInteruniversitaire Boolean             @default(false) @map("est_interuniversitaire") // Recommandation qui vient d'une autre université
  universiteSource      String?             @map("universite_source") // ID de l'université source pour recommandations interuniversitaires

  user      User      @relation(fields: [userId], references: [id])
  ressource Ressource @relation(fields: [ressourceId], references: [id])

  @@index([userId, estVue])
  @@index([ressourceId])
}

enum MotifRecommandation {
  INTERET_SIMILAIRE
  CONSULTE_RECEMMENT
  POPULAIRE_DOMAINE
  NOUVEAU_CONTENU
  SUGGESTION_ENSEIGNANT
}

model Universite {
  id                       String                    @id @default(uuid())
  nom                      String                    @unique
  adresse                  String?
  ville                    String
  siteWeb                  String?                   @map("site_web")
  // Relations manquantes
  statistiquesBibliotheque StatistiqueBibliotheque[]
  reglePrets               ReglePret[]

  politiqueBibliotheques PolitiqueBibliotheque[]

  ufrs Ufr[]
}

model Ufr {
  id           String  @id @default(uuid())
  nom          String
  description  String? @db.Text
  universiteId String  @map("universite_id")

  // Relations
  universite   Universite    @relation(fields: [universiteId], references: [id])
  departements Departement[]

  @@index([universiteId])
}

model Departement {
  id          String  @id @default(uuid())
  nom         String
  description String? @db.Text
  ufrId       String  @map("ufr_id")
  responsable String? @map("responsable") // Nom du responsable du département

  // Relations
  ufr      Ufr       @relation(fields: [ufrId], references: [id])
  filieres Filiere[]

  @@index([ufrId])
}

model Filiere {
  id            String       @id @default(uuid())
  nom           String
  description   String?      @db.Text
  niveauEtudes  NiveauEtudes @default(LICENCE_1) @map("niveau_etudes")
  departementId String       @map("departement_id")
  // Relations
  departement   Departement  @relation(fields: [departementId], references: [id])
  etudiants     Etudiant[]

  @@index([departementId])
}

enum NiveauEtudes {
  LICENCE_1
  LICENCE_2
  LICENCE_3
  MASTER_1
  MASTER_2
  DOCTORAT
}

enum RoleUser {
  ETUDIANT
  ENSEIGNANT
  BIBLIOTHECAIRE
  ADMIN
}

// Modèle User avec préférences de recommandation
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  motDePasse        String    @map("mot_de_passe")
  nom               String
  telephone         String?
  prenom            String
  image             String?
  role              RoleUser  @map("role")
  derniereConnexion DateTime? @map("derniere_connexion")
  estActif          Boolean   @default(true) @map("est_actif")

  // Relations existantesregle
  contributions             Ressource[]
  favoris                   Favori[]
  commentaires              Commentaire[]
  notations                 Notation[]
  historiques               HistoriqueAcces[]
  collections               Collection[]
  reservations              Reservation[]
  emprunts                  Emprunt[]
  recommandations           Recommandation[]
  // Nouveaux champs pour recommandations
  preferencesRecommandation String?                 @map("preferences_recommandation") // JSON: {"domaines": ["informatique", "droit"], "formats": ["pdf", "docx"]}
  frequenceRecommandation   FrequenceRecommandation @default(HEBDOMADAIRE) @map("frequence_recommandation")
  JournalAudit              JournalAudit[]
  donneesRecommandations    DonneesRecommandation[]
  notifications             Notification[]
  etudiants                 Etudiant[]
  enseignants               Enseignant[]
  bibliothecaires           Bibliothecaire[]
  administrateurs           Administrateur[]
  sanctions                 SanctionUtilisateur[]

  @@index([preferencesRecommandation])
  @@index([frequenceRecommandation])
  @@index([role])
  @@index([email])
}

model Etudiant {
  id              String       @id @default(uuid())
  userId          String       @map("user_id")
  numeroEtudiant  String       @unique @map("numero_etudiant")
  dateNaissance   DateTime     @map("date_naissance")
  dateInscription DateTime     @default(now()) @map("date_inscription")
  niveauEtudes    NiveauEtudes @default(LICENCE_1) @map("niveau_etudes")
  user            User         @relation(fields: [userId], references: [id])
  filiereId       String       @map("filiere_id")
  filiere         Filiere      @relation(fields: [filiereId], references: [id])

  @@index([userId])
}

model Enseignant {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  numeroEnseignant String   @unique @map("numero_enseignant")
  dateNaissance    DateTime @map("date_naissance")
  specialite       String?
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Bibliothecaire {
  id                   String        @id @default(uuid())
  userId               String        @map("user_id")
  numeroBibliothecaire String        @unique @map("numero_bibliothecaire")
  dateNaissance        DateTime      @map("date_naissance")
  adresse              String?
  ville                String?
  pays                 String?
  user                 User          @relation(fields: [userId], references: [id])
  reservations         Reservation[]

  @@index([userId])
}

model Administrateur {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  numeroAdmin   String   @unique @map("numero_administrateur")
  dateNaissance DateTime @map("date_naissance")
  adresse       String?
  ville         String?
  pays          String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum FrequenceRecommandation {
  QUOTIDIENNE
  HEBDOMADAIRE
  MENSUELLE
  JAMAIS
}

model Favori {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  ressourceId    String    @map("ressource_id")
  dateAjout      DateTime  @default(now()) @map("date_ajout")
  note           String?   @db.Text
  user           User      @relation(fields: [userId], references: [id])
  ressource      Ressource @relation(fields: [ressourceId], references: [id])
  universiteSrc  String?   @map("universite_source") // Si favori externe
  universiteUser String?   @map("universite_utilisateur") // Université de l'utilisateur

  @@unique([userId, ressourceId])
  @@index([dateAjout])
  @@index([universiteSrc])
  @@index([universiteUser])
}

model Commentaire {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  ressourceId    String    @map("ressource_id")
  contenu        String    @db.Text
  dateCreation   DateTime  @default(now()) @map("date_creation")
  user           User      @relation(fields: [userId], references: [id])
  ressource      Ressource @relation(fields: [ressourceId], references: [id])
  universiteSrc  String?   @map("universite_source") // Si commentaire externe
  universiteUser String?   @map("universite_utilisateur")

  @@index([ressourceId, dateCreation])
  @@index([universiteSrc])
  @@index([universiteUser])
}

model Notation {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  ressourceId    String    @map("ressource_id")
  note           Int // 1-5
  dateNotation   DateTime  @default(now()) @map("date_notation")
  user           User      @relation(fields: [userId], references: [id])
  ressource      Ressource @relation(fields: [ressourceId], references: [id])
  universiteSrc  String?   @map("universite_source") // Si notation externe
  universiteUser String?   @map("universite_utilisateur") // Université de l'utilisateur

  @@unique([userId, ressourceId])
  @@index([ressourceId])
  @@index([universiteSrc])
  @@index([universiteUser])
}

model HistoriqueAcces {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  ressourceId    String    @map("ressource_id")
  dateAcces      DateTime  @default(now()) @map("date_acces")
  typeAcces      TypeAcces
  universiteSrc  String?   @map("universite_source") // Si accès externe
  universiteUser String?   @map("universite_utilisateur") // Université de l'utilisateur

  user      User      @relation(fields: [userId], references: [id])
  ressource Ressource @relation(fields: [ressourceId], references: [id])

  @@index([dateAcces])
  @@index([ressourceId, typeAcces])
}

enum TypeAcces {
  CONSULTATION
  TELECHARGEMENT
  CITATION
  PARTAGE
}

model DonneesRecommandation {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  ressourceId     String          @map("ressource_id")
  score           Float // Score de pertinence calculé
  typeInteraction TypeInteraction @map("type_interaction")
  dateDonnee      DateTime        @default(now()) @map("date_donnee")

  // Relations manquantes
  user      User      @relation(fields: [userId], references: [id])
  ressource Ressource @relation(fields: [ressourceId], references: [id])

  @@index([userId])
  @@index([ressourceId])
  @@index([dateDonnee])
}

enum TypeInteraction {
  VUE
  TELECHARGEMENT
  FAVORI
  NOTATION
  EMPRUNT
  RESERVATION
  RECHERCHE_SIMILAIRE
}

model Collection {
  id           String                @id @default(uuid())
  userId       String                @map("user_id")
  nom          String
  description  String?               @db.Text
  dateCreation DateTime              @default(now()) @map("date_creation")
  user         User                  @relation(fields: [userId], references: [id])
  ressources   CollectionRessource[]

  @@index([userId])
}

model CollectionRessource {
  id           String     @id @default(uuid())
  collectionId String     @map("collection_id")
  ressourceId  String     @map("ressource_id")
  dateAjout    DateTime   @default(now()) @map("date_ajout")
  notes        String?    @db.Text
  collection   Collection @relation(fields: [collectionId], references: [id])
  ressource    Ressource  @relation(fields: [ressourceId], references: [id])

  @@unique([collectionId, ressourceId])
  @@index([dateAjout])
}

enum TypeTransaction {
  PUBLICATION
  MODIFICATION
  ACCES
  SUPPRESSION
  PARTAGE
}

enum StatutTransaction {
  INITIEE
  VALIDEE
  REJETEE
  ANNULEE
}

enum TypeRessource {
  MEMOIRE
  THESE
  ARTICLE_SCIENTIFIQUE
  COURS
  SUPPORT_PEDAGOGIQUE
  RAPPORT_RECHERCHE
  LIVRE
  CONFERENCE
}

enum NiveauAcces {
  PUBLIC // Accessible à tous
  AUTHENTIFIE // Accessible aux utilisateurs authentifiés
  UNIVERSITE_ORIGINE // Réservé aux membres de l'université d'origine
  PRIVE // Accès limité (créateur et administrateurs)
}

// Modèle Ressource pour bibliothèque
model Ressource {
  // Champs existants
  id                  String         @id @default(uuid())
  titre               String
  description         String         @db.Text
  type                TypeRessource
  langue              String         @default("fr")
  urlFichier          String         @map("url_fichier")
  urlFichierLocal     String?        @default("file:///tmp/ressource.pdf") @map("url_fichier_local")
  format              String // pdf, docx, etc.
  dateModification    DateTime       @updatedAt @map("date_modification")
  motsCles            String         @map("mots_cles")
  auteurId            String?        @map("auteur_id")
  universiteId        String         @map("universite_id")
  image               String?
  niveauAcces         NiveauAcces    @default(PUBLIC) @map("niveau_acces")
  datePublication     DateTime?      @default(now()) @map("date_publication")
  estValide           Boolean        @default(true) @map("est_valide")
  estArchive          Boolean        @default(false) @map("est_archive")
  nomAuteurExterne    String?        @map("nom_auteur_externe")
  prenomAuteurExterne String?        @map("prenom_auteur_externe")
  validation          TypeValidation @default(EN_ATTENTE) @map("validation")

  // Champs pour bibliothèque
  isbn               String?
  doi                String?
  anneePublication   Int?    @map("annee_publication")
  nbPages            Int?    @map("nb_pages")
  nbExemplaires      Int     @default(0) @map("nb_exemplaires")
  nbDisponibles      Int     @default(0) @map("nb_disponibles")
  coteClassification String? @map("cote_classification") // Classification Dewey ou autre

  // Relations
  auteur User? @relation(fields: [auteurId], references: [id])

  favoris                Favori[]
  commentaires           Commentaire[]
  notations              Notation[]
  historiques            HistoriqueAcces[]
  collections            CollectionRessource[]
  // partages          PartageUniversite[]
  exemplaires            ExemplairePhysique[]
  reservations           Reservation[]
  recommandations        Recommandation[]
  donneesRecommandations DonneesRecommandation[]
  categorieId            String
  categorie              Categorie?              @relation(fields: [categorieId], references: [id])

  @@index([datePublication])
  @@index([universiteId])
  @@index([estValide, estArchive])
}

model Categorie {
  id           String      @id @default(uuid())
  libelle      String      @unique
  description  String?     @db.Text
  dateCreation DateTime    @default(now()) @map("date_creation")
  ressources   Ressource[]

  @@index([libelle])
}

// Statistiques des prêts et réservations
model StatistiqueBibliotheque {
  id                        String  @id @default(uuid())
  universiteId              String  @map("universite_id")
  mois                      Int
  annee                     Int
  nbEmprunts                Int     @default(0) @map("nb_emprunts")
  nbEmpruntsExternes        Int     @default(0) @map("nb_emprunts_externes") // Emprunts provenant d'autres universités
  nbReservations            Int     @default(0) @map("nb_reservations")
  nbReservationsExternes    Int     @default(0) @map("nb_reservations_externes") // Réservations provenant d'autres universités
  nbRetardsRendu            Int     @default(0) @map("nb_retards_rendu")
  tauxRotation              Float?  @map("taux_rotation") // Ratio prêts/nombre d'exemplaires
  categoriesPlusEmpruntees  String? @map("categories_plus_empruntees") // JSON array
  universitesPlusFrequentes String? @map("universites_plus_frequentes") // Universités partenaires les plus actives

  // Relation manquante
  universite Universite @relation(fields: [universiteId], references: [id])

  @@unique([universiteId, mois, annee])
  @@index([annee, mois])
}

// Modèle pour les notifications (manquant dans le schéma original)
model Notification {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  titre            String
  message          String           @db.Text
  dateCreation     DateTime         @default(now()) @map("date_creation")
  estLue           Boolean          @default(false) @map("est_lue")
  typeNotification TypeNotification

  user User @relation(fields: [userId], references: [id])

  @@index([userId, estLue])
  @@index([dateCreation])
}

enum TypeNotification {
  EMPRUNT
  RAPPEL_RETOUR
  RESERVATION_CONFIRMEE
  NOUVELLE_RESSOURCE
  RECOMMANDATION
  PARTAGE
  CONVENTION
  ADMINISTRATIF
}

// Modèle pour l'audit des actions système (manquant dans le schéma original)
model JournalAudit {
  id            String   @id @default(uuid())
  userId        String?  @map("user_id")
  action        String
  entite        String // Nom de la table concernée
  entiteId      String   @map("entite_id")
  dateAction    DateTime @default(now()) @map("date_action")
  detailsAction Json     @map("details_action")
  ipAdresse     String   @map("ip_adresse")

  user User? @relation(fields: [userId], references: [id])

  @@index([dateAction])
  @@index([userId])
  @@index([entite, entiteId])
}
