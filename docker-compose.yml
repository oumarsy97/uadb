version: '3.8'

services:
  # Service principal NestJS
  nestjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: microservice-uadb:0.0.1
    container_name: microservice-uadb
    ports:
      - "4000:4000"
    volumes:
      # Monte votre code local dans /app pour le hot‑reload
      - .:/app
      # Isole node_modules du conteneur pour éviter des conflits
      - /app/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      # Variables de connexion à MySQL (exemple pour TypeORM ou @nestjs/typeorm)
      - DB_TYPE=mysql
      - DB_HOST=mysql-db
      - DB_PORT=3306
      - DB_DATABASE=${DATABASE_NAME:-nestjs_db}
      - DB_USERNAME=${DATABASE_USER:-root}
      - DB_PASSWORD=${DATABASE_PASSWORD:-password}
    depends_on:
      - mysql
    networks:
      - nestjs-network
    restart: unless-stopped
    # Lance NestJS en mode watch pour recharger à chaud à chaque modif
    command: npm run start:dev

  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME:-nestjs_db}
      MYSQL_USER: ${DATABASE_USER:-root}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-password}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD:-rootpassword}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - nestjs-network
    restart: unless-stopped

  # Cache Redis (optionnel)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - nestjs-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local

networks:
  nestjs-network:
    driver: bridge
